// This file is for the manually written orchestrator. It is not required on the AI4EU Experiments platform.

syntax = "proto3";

//
// gui
//

message Empty {
}

//
// skillmatching
//

message SkillMatchRequest {
  string ontology = 1; // path to ontology
  bool positive = 2;   // request positive matches
  bool negative = 3;   // request negative matches
}

message SkillMatchTriple {
  // classes in the ontology
  // = what we require from the machine
  // e.g. [UnsealedBox,BlueSeal] (as inputs)
  repeated string requirement = 1;

  // a class in the ontology
  // = what the machine offers
  // e.g. [BoxClosewithBlueSealSkill,BlueSealedBox] (as skill + outputs)
  repeated string offer = 2;

  // an instance in the ontology
  // = the machine that offers or does not provide the offer under the requirement
  // e.g. "sealerunit1"
  string module = 3;
}

message SkillMatchResult {
  // all pairs of requirements/offers that match
  repeated SkillMatchTriple positiveMatches = 1;
  // all pairs of requirements/offers that do not
  repeated SkillMatchTriple negativeMatches = 2;
}

//
// planning
//

message DesiredMagazineState {
  // which sequence of products is expected in this magazine (at most 3)
  repeated string output = 1;
}

message PlannerRequest {
  // path to ontology that provides the topology
  string ontology = 2;
  // which magazine states are expected (at most 3)
  repeated DesiredMagazineState goal = 1;
  // maximum number of time steps to consider (at most 20)
  uint32 max_time_step = 3;
}

message Action {
  uint32 timestep = 1;
  string action = 2;
}

message PlannerResult {
  repeated Action actions = 1;
}

//
// time estimation
//

message ProductInput {
  string product = 1; // name of the product, for identification in result
  string type = 2;    // red, white, blue
  float timeEnteringSystem = 3; // seconds
}

message TimeEstimateRequest {
  repeated ProductInput products_entering_system = 1;
}

message ProductEstimatedTime {
  string product = 1;              // name of product
  float estimatedTimeInSystem = 2; // seconds
}

message TimeEstimateResult {
  repeated ProductEstimatedTime time = 1;
}

//
// composite inputs/outputs
//

message SkillMatchAndPlannerRequest {
  SkillMatchRequest skillmatchRequest = 1;
  PlannerRequest plannerRequest = 2;
}

message SkillMatchResultAndPlannerRequest {
  SkillMatchResult skillmatchResult = 1;
  PlannerRequest plannerRequest = 2;
}

message PlannerResultAndTimeEstimateRequest {
  PlannerResult plannerResult = 1;
  TimeEstimateRequest timeEstimateRequest = 2;
}

message PlannerResultAndTimeEstimateResult {
  PlannerResult plannerResult = 1;
  TimeEstimateResult timeEstimateResult = 2;
}

//
// services
//

service AI4IndustryGUI {
  rpc requestPipelineRun(Empty) returns (SkillMatchAndPlannerRequest);
  rpc displayPipelineResult(PlannerResultAndTimeEstimateResult) returns (Empty);
}

service SkillMatcher {
  rpc compute(SkillMatchAndPlannerRequest) returns (SkillMatchResultAndPlannerRequest);
}

service AI4IndustryPlanner {
  rpc computeOptimalPlan(SkillMatchResultAndPlannerRequest) returns (PlannerResultAndTimeEstimateRequest);
}

service TimeEstimator {
  rpc compute(PlannerResultAndTimeEstimateRequest) returns (PlannerResultAndTimeEstimateResult);
}
